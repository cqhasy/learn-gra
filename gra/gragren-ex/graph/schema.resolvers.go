package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"gragen-ex/graph/generated"
	"gragen-ex/graph/model"
)

var usersDB = []*model.User{
	{ID: "1", Name: "Alice", Age: 23},
	{ID: "2", Name: "Bob", Age: 25},
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, age int) (*model.User, error) {
	id := fmt.Sprintf("%d", len(usersDB)+1)
	user := &model.User{
		ID:   id,
		Name: name,
		Age:  age,
	}
	usersDB = append(usersDB, user)
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return usersDB, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	for _, u := range usersDB {
		if u.ID == id {
			return u, nil
		}
	}
	return nil, nil // 找不到返回 nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
